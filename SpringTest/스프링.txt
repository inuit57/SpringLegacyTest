스프링.txt
- 참고 : 파일 오른쪽 위의 s 표시 - spring에서 현재 사용 중이라는 뜻.
- 스프링 웹 프로젝트 구성 

	크게 3개의 layer(tier)와 DB 하나 있는 구조로 되어있다. 
	
	1) Presentation Layer(tier) : UI 담당 영역 / 웹 - 모바일을 구분하는 계층
		=> jsp(view) 구현 / html , css , js 등등 
		=> controller  
	
	2) Business Logic Layer : 서비스 계층 , 고객의 요구사항을 반영하는 계층 (기능적 구성) = Action Page 
		=> Service(Model의 역할) 구현 
		
	3) Data Access Layer(= Persistence Layer) : DB 데이터 처리 계층. 
		=> DAO 
		=> MyBatis (xml)
		
	4) DB
		=> MySQL
		
		
		
	* MyBatis : DB와 DAO 객체 사이에서 효율적인 데이터 처리를 위한 프레임워크  
	- SQL Mapper 라이브러리  
	- 간결한 코드 처리 : 예외처리, pstmt , rs 객체를 처리 
	- SQL 구문을 분리 : xml / annotation 을 사용한 처리 가능. 
	- spring과 자동 연동
	- 동적 SQL 가능 
	   
	   - https://mvnrepository.com/artifact/org.mybatis/mybatis/3.4.1
	   - https://mvnrepository.com/artifact/org.mybatis/mybatis-spring/1.3.0
	   - https://mvnrepository.com/artifact/org.springframework/spring-jdbc/5.3.8
	   - https://mvnrepository.com/artifact/org.springframework/spring-test/5.3.8
	   
	   -${org.springframework-version} 
	   - spring-jdbc, spring-test 의 version을 이걸로 수정 
	   - 기존 spring 버전을 따라가겠습니다~. 
	   
	   - spring-test의 scope는 삭제 
	   
   - root-context.xml 수정 
       - Namespace 탭에서 aop, context,jdbc, mybatis-spring 체크하고 저장 
       - beans에서 사용할 수 있도록 해준다는 것.
	   
	   - DataSource 객체 추가
	   ``` 
	   <!-- DataSource 객체 -->
		<bean id="dataSource"
			class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver">	</property>
			<property name="url" value="jdbc:mysql://localhost:3306/springdb"></property>
			<property name="username" value="root"></property>
			<property name="password" value="1234"></property>
		</bean>
	 	```
	 	
	* MyBatis - 스프링 연동 처리 객체 
	  => SqlSessionFactory 객체 : DB 연결 , SQL 실행 관련 동작
	 	=> SqlSessionFactoryBean 클래스를 사용해서 해당 객체를 생성
	 - root-context.xml에 추가
	```
	<!-- SqlSessionFactory 객체 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>	
	</bean>
	<!-- SqlSessionFactory 객체 -->
	```
	
	- src/main/resouces 아래에 mybatis-config.xml 파일 추가 
	- mybatis config dtd 검색 
	```
	<!DOCTYPE configuration
	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
	
	</configuration>
	```
	- 일단 여기까지만 등록하기 
	- sqlSessionFactory 객체에 configLocation 속성에 mybatis 등록 
	
	
	* 스프링 MVC ( model2 방식 )
	
	[기존 MVC] 
	요청 -> Controller <-> Model <-> DB
	          ||
	         View
     
	[Front Controller 패턴을 사용한 MVC]
	요청 ->    Front    <-> Controller <-> Model <-> DB  
	       Controller 
	           ||
	          View
	- View 와 DB로 가는 처리를 분리 
	- Controller의 역할을 위임했다고도 표현한다.
	
	[Spring]              |                                         |              
	요청 ->    Front    <->| Controller <-> Service(Model)<-> DAO <->| MyBatis <-> DB  
	       Controller     |                                         |      
	           ||         |                                         |    
	          View        |                 Spring MVC              |
	             
    - 안쪽의 Controller ~ Model은 Spring에서 제공되는 기능을 활용 
    - Spring MVC에서 처리하는 작업
       - URI를 분석해서 적당한 컨트롤러를 매핑 
       - 컨트롤러에 필요한 메서드 호출
       - 컨트롤러의 결과 데이터를 View로 전달하는 작업 
       - 처리에 따른 적절한 뷰 연결 
       
       - 파라미터의 수집 
       
    - 개발자가 처리해야하는 작업 
       - 특정 URI에 해당하는 컨트롤러를 생성
       - 서비스 객체를 생성
       - DAO 객체의 생성
       - 컨트롤러의 처리를 담당하는 메서드 생성 
       
       
       * 스프링 + MyBatis 
       
       - MyBatis : Sql Mapper 라이브러리 (이전 버전 : iBatis) 
       => XML, 어노테이션을 활용한 SQL 구문을 사용가능 
       => pstmt , rs 객체를 다양하게 활용가능 
       
       1) XML 코드를 사용하여 SQL 구문을 작성 , DAO 파일에서는 XML 코드를 호출 
       		장점 : SQL구문을 XML파일로 작성, 구문의 수정/유지보수 우수함  
       		단점 : 개발의 코드 분량이 증가, 복잡성이 증가
       		
       2) 어노테이션과 인터페이스를 사용한 SQL 구문 사용
       		장점 : 별도의 DAO 없이 개발, 생산성의 효율이 우수함
       		단점 : sql구문을 어노테이션 안에 작성하기에 매번 컴파일을 수행해야한다.
       
       3) 인터페이스 / XML 코드를 적절하게 섞어서 사용 
       		장점 : 간단한 SQL구문은 인터페이스(어노테이션), 복잡한 SQL구문은 XML파일로 구현. ->유연한 처리
       		단점 : 개발방식과 역량에 따른 작업 차이가 발생할 수 있다. 중요프로젝트에서는 사용하지 않고,하나로 통일한다. 
   		
   		* 도메인(Domain) : 개발을 진행하면서 개발에 필요한 중요한 단어(명사)  
   		ex) 쇼핑몰이라면 => 회원, 물건, 주문, 문의, 배송, ... (1차 도메인)
   		                 이름,나이, ....(회원의 2차 도메인)
   		
   		=> DB 테이블 생성 (물리적인 환경으로 구분 가능한 단위) 
   		
       		
       	* MyBatis 사용순서
       	- DB 생성, 필요한 테이블 생성 (개발준비) 
       	- 도메인(Domain) 객체의 설계 및 클래스 생성 (DTO / VO)
       	- DAO 인터페이스 객체 생성 
       	- 인터페이스에 기능을 정의 ( 추상 메서드 생성)
       	- XML Mapper 생성 , SQL 구문 작성 
       		- XML 파일에 DTD 추가
       		- XML 파일에 Mapper의 위치(저장경로)를 저장
       		- SQL 구문 작성 
       	- MyBatis 사용하여 XML Mapper를 인식(연결)
       		: SQLsessionFactory bean에 mapper 등록
       		```
       		<!-- mapper 설정 정보 -->
			<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
			```
			/**/ : 현재 폴더 경로 아래의 모든 폴더
			/*Mapper.xml : Mapper.xml로 끝나는 모든 파일 
       	- DAO 객체를 구현
       	- 스프링에서 사용 (DAO 객체 생성, 테스트에서 호출) 
       	
       	* Mapper 
       	- namespace : mapper 위치를 저장 
       	- id : 안에서 여러 SQL 구문 중에서 사용할 쿼리를 선택 
       	- resultType : 어떤 형태로 값을 받아올지 설정(인터페이스에 미리 설정한 것과 맞추기) 
       	
       	## 주의사항
       	- 안에 주석달지 말기.
       	- 내부 SQL 구문에서는 ";"을 사용하지 않는다.
       	
     SqlSession 인터페이스 객체 
       	|	
	* SqlSessionTemplate 객체 ( mybatis-spring 라이브러리에 포함 )
	-> SqlSession 인터페이스를 구현  
	-> 디비 연결, 자원 해제를 자동으로 처리해주는 객체 
	-> 기본적인 트랜젝션 처리, 쓰레드 처리 가능 => DB 안정성을 보장하는 객체  

	
	TEST 파일(DAOtest) -> DAO 메서드 호출 -> DAOImpl 객체 호출 
	  DAO 객체 주입							@Repository 사용
	  										DAO(인터페이스) 대신 DAOImpl(클래스) 사용
											 
	-> SqlSession 객체 생성 -> Mapper 에 있는 SQL 구문 실행 -> DAOImpl -> Test 파일  
	  디비연결, 자원 해제         실행 결과를 저장 리턴   
	  MyBatis 설정
	
       
       